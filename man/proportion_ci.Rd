% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prop_ci.R
\name{ci_prop_wald}
\alias{ci_prop_wald}
\alias{ci_prop_wilson}
\alias{ci_prop_clopper_pearson}
\alias{ci_prop_agresti_coull}
\alias{ci_prop_jeffreys}
\alias{ci_prop_wilson_strata}
\title{Wald CI}
\usage{
ci_prop_wald(x, conf.level = 0.95, correct = FALSE, data = NULL)

ci_prop_wilson(x, conf.level = 0.95, correct = FALSE, data = NULL)

ci_prop_clopper_pearson(x, conf.level = 0.95, data = NULL)

ci_prop_agresti_coull(x, conf.level = 0.95, data = NULL)

ci_prop_jeffreys(x, conf.level = 0.95, data = NULL)

ci_prop_wilson_strata(
  x,
  strata,
  weights = NULL,
  conf.level = 0.95,
  max.iterations = 10L,
  correct = FALSE,
  data = NULL
)
}
\arguments{
\item{x}{(`binary`/`numeric`/`logical`)\cr
vector of a binary values, i.e. a logical vector, or numeric with values `c(0, 1)`}

\item{conf.level}{(`scalar numeric`) \cr a scalar in (0,1) indicating the confidence level. Default is 0.95}

\item{correct}{(scalar `logical`)\cr include the continuity correction. For further information, see for example
[stats::prop.test()].}

\item{data}{(`data.frame`) \cr Optional data frame containing the variables specified in `x` and `by`.}

\item{strata}{(`factor`)\cr variable with one level per stratum and same length as `x`.}

\item{weights}{(`numeric`)\cr weights for each level of the strata. If `NULL`, they are
estimated using the iterative algorithm that
minimizes the weighted squared length of the confidence interval.}

\item{max.iterations}{(positive `integer`)\cr maximum number of iterations for the iterative procedure used
to find estimates of optimal weights.}
}
\description{
Wald CI
}
\section{Functions}{
\itemize{
\item \code{ci_prop_wald()}: Calculates the Wald interval by following the usual textbook definition
  for a single proportion confidence interval using the normal approximation.

\deqn{\hat{p} \pm z_{\alpha/2} \sqrt{\frac{\hat{p}(1 - \hat{p})}{n}}}

\item \code{ci_prop_wilson()}: Calculates the Wilson interval by calling [stats::prop.test()].
 Also referred to as Wilson score interval.

\deqn{\frac{\hat{p} +
\frac{z^2_{\alpha/2}}{2n} \pm z_{\alpha/2} \sqrt{\frac{\hat{p}(1 - \hat{p})}{n} +
\frac{z^2_{\alpha/2}}{4n^2}}}{1 + \frac{z^2_{\alpha/2}}{n}}}

\item \code{ci_prop_clopper_pearson()}: Calculates the Clopper-Pearson interval by calling [stats::binom.test()].
  Also referred to as the `exact` method.

\deqn{
\left( \frac{k}{n} \pm z_{\alpha/2} \sqrt{\frac{\frac{k}{n}(1-\frac{k}{n})}{n} +
\frac{z^2_{\alpha/2}}{4n^2}} \right)
/ \left( 1 + \frac{z^2_{\alpha/2}}{n} \right)}

\item \code{ci_prop_agresti_coull()}: Calculates the `Agresti-Coull` interval (created by `Alan Agresti` and `Brent Coull`) by
  (for 95% CI) adding two successes and two failures to the data and then using the Wald formula to construct a CI.

\deqn{
\left( \frac{\tilde{p} + z^2_{\alpha/2}/2}{n + z^2_{\alpha/2}} \pm
z_{\alpha/2} \sqrt{\frac{\tilde{p}(1 - \tilde{p})}{n} +
\frac{z^2_{\alpha/2}}{4n^2}} \right)}

\item \code{ci_prop_jeffreys()}: Calculates the Jeffreys interval, an equal-tailed interval based on the
  non-informative Jeffreys prior for a binomial proportion.

\deqn{\left( \text{Beta}\left(\frac{k}{2} + \frac{1}{2}, \frac{n - k}{2} + \frac{1}{2}\right)_\alpha,
\text{Beta}\left(\frac{k}{2} + \frac{1}{2}, \frac{n - k}{2} + \frac{1}{2}\right)_{1-\alpha} \right)}

\item \code{ci_prop_wilson_strata()}: Calculates the stratified Wilson confidence
  interval for unequal proportions as described in
  Xin YA, Su XG. Stratified Wilson and Newcombe confidence intervals
  for multiple binomial proportions. _Statistics in Biopharmaceutical Research_. 2010;2(3).

\deqn{\frac{\hat{p}_j + \frac{z^2_{\alpha/2}}{2n_j} \pm
z_{\alpha/2} \sqrt{\frac{\hat{p}_j(1 - \hat{p}_j)}{n_j} +
\frac{z^2_{\alpha/2}}{4n_j^2}}}{1 + \frac{z^2_{\alpha/2}}{n_j}}}

}}
\examples{
# example code
x <- c(
TRUE, TRUE, TRUE, TRUE, TRUE,
FALSE, FALSE, FALSE, FALSE, FALSE
)

ci_prop_wald(x, conf.level = 0.9)

# Stratified Wilson confidence interval with unequal probabilities

set.seed(1)
rsp <- sample(c(TRUE, FALSE), 100, TRUE)
strata_data <- data.frame(
  x = sample(c(TRUE, FALSE), 100, TRUE),
  "f1" = sample(c("a", "b"), 100, TRUE),
  "f2" = sample(c("x", "y", "z"), 100, TRUE),
  stringsAsFactors = TRUE
)
strata <- interaction(strata_data)
n_strata <- ncol(table(rsp, strata)) # Number of strata

proportion_ci_strat_wilson(
  x = rsp, strata = strata,
  conf.level = 0.90
)

# Not automatic setting of weights
proportion_ci_strat_wilson(
  x = rsp, strata = strata,
  weights = rep(1 / n_strata, n_strata),
  conf.level = 0.90
)

}
